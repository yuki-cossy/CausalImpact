> ###################################################
> # R code for "Big Data: New Tricks for Econometrics
> # Journal of Economic Perspectives 28(2), 3-28            
> # http://pubs.aeaweb.org/doi/pdfplus/10.1257/jep.28.2.3
> # Hal R. Varian
> ###################################################
> 
> # data is from http://biostat.mc.vanderbilt.edu/wiki/Main/DataSets
> # documentation in titanic3.txt
> dat <- read.csv("titanic3.csv")
> 
> # for reproducibility
> set.seed(1234)
> 
> # remove obs with missing data, and select a few predictors
> titanic <- na.omit(dat[,c("survived","pclass","sex","age","sibsp")])
> 
> # create train and test sets (~40% for training, ~60% for testing)
> titanic$randu <- runif(nrow(titanic),0,1)
> titanic.train <- titanic[titanic$randu < .4,]
> titanic.test <- titanic[titanic$randu >= .4,]
> 
> ################################################
> # ctree
> ################################################
> library(party)
> model.ctree <- ctree(as.factor(survived) ~ pclass + sex + age + sibsp, data = titanic.train)
> plot(model.ctree)
> # predict on test data
> pred.ctree <- predict(model.ctree,newdata=titanic.test,type="response")
> # confusion matrix
> conf <- table(pred.ctree, titanic.test$survived)
> conf
          
pred.ctree   0   1
         0 363 113
         1  16 143
> # proportions
> prop.table(conf)
          
pred.ctree          0          1
         0 0.57165354 0.17795276
         1 0.02519685 0.22519685
> # error rate
> (conf[1,2]+conf[2,1])/sum(conf)
[1] 0.2031496
> 
> ##################################
> # rpart
> ##################################
> library(rpart)
> # predict model
> model.rpart <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp, data = titanic.train)
> # plot model
> plot(model.rpart) # plot tree
> text(model.rpart) # add labels to tree
> # print complexity parameter table using cross validation
> printcp(model.rpart)

Classification tree:
rpart(formula = as.factor(survived) ~ pclass + sex + age + sibsp, 
    data = titanic.train)

Variables actually used in tree construction:
[1] age    pclass sex    sibsp 

Root node error: 171/411 = 0.41606

n= 411 

        CP nsplit rel error  xerror     xstd
1 0.426901      0   1.00000 1.00000 0.058437
2 0.052632      1   0.57310 0.57310 0.050521
3 0.035088      2   0.52047 0.57895 0.050696
4 0.014620      4   0.45029 0.52632 0.049029
5 0.010000      7   0.40351 0.54386 0.049606
> # plot complexity parameter data
> plotcp(model.rpart)
> # choose complexity parameter to prune tree
> model.pruned <- prune(model.rpart,cp=0.023)
> # plot pruned tree
> plot(model.pruned) # plot tree
> text(model.pruned) # add lables
> 
> # compare models side by side
> par(mfcol=c(1,2))
> plot(model.rpart)
> text(model.rpart)
> plot(model.pruned)
> text(model.pruned)
> # predict using rpart model
> pred.rpart <- predict(model.rpart,newdata=titanic.test,type="class")
> conf <- table(pred.rpart, titanic.test$survived)
> conf
          
pred.rpart   0   1
         0 352 100
         1  27 156
> prop.table(conf)
          
pred.rpart          0          1
         0 0.55433071 0.15748031
         1 0.04251969 0.24566929
> # error rate
> (conf[1,2]+conf[2,1])/sum(conf)
[1] 0.2
> 
> # predict using pruned model
> pred.pruned <- predict(model.pruned,newdata=titanic.test,type="class")
> conf <- table(pred.pruned, titanic.test$survived)
> conf
           
pred.pruned   0   1
          0 363 109
          1  16 147
> prop.table(conf)
           
pred.pruned          0          1
          0 0.57165354 0.17165354
          1 0.02519685 0.23149606
> # error rate
> (conf[1,2]+conf[2,1])/sum(conf)
[1] 0.1968504
> 
> # compare to logit
> model.logit <- glm(survived ~ pclass + sex + age + sibsp, data = titanic.train)
> temp <- predict(model.logit,type="response",newdata=titanic.test)
> pred.logit <- temp > .5
> conf <- table(pred.logit, titanic.test$survived)
> conf
          
pred.logit   0   1
     FALSE 319  71
     TRUE   60 185
> prop.table(conf)
          
pred.logit          0          1
     FALSE 0.50236220 0.11181102
     TRUE  0.09448819 0.29133858
> # error rate
> (conf[1,2]+conf[2,1])/sum(conf)
[1] 0.2062992
> 